##
name: Docker
on:
  workflow_call:
    inputs:
      osname:
        required: true
        type: string
        description: 'Name of the operating system'
      osstablever:
        required: true
        type: string
        description: 'Stable version of the OS'
      pythonvers:
        required: true
        type: string
        description: 'JSON array of Python versions to build'
      osvers:
        required: true
        type: string
        description: 'JSON array of OS versions to build'
      branch:
        required: false
        type: string
        default: ""

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKER_USER }}/sd-test
  MAIN_BRANCH: master
  STABLE_PY: "3.10"
  STABLE_OS: "debian"

jobs:
  get-refs:
    runs-on: ubuntu-latest
    steps:
      # Build the latest tag and master if no branch is provided
      - id: upstream
        uses: oprypin/find-latest-tag@v1
        with:
          repository: eliasdoehne/stellaris-dashboard
          releases-only: true
        if: inputs.branch == ''
      - id: latest-release
        run: |
          echo "buildref=${{ steps.upstream.outputs.tag }}" >> $GITHUB_OUTPUT
        if: inputs.branch == ''
      - id: main-branch
        run: |
          echo "buildref=${{ env.MAIN_BRANCH }}" >> $GITHUB_OUTPUT
        if: inputs.branch == ''
      # Build only the branch if one is provided
      - id: manual-branch
        run: |
          echo "buildref=${{ inputs.branch }}" >> $GITHUB_OUTPUT
        if: inputs.branch != ''

      - run: echo "Refs to build ${{ toJSON(steps.*.outputs.buildref) }}"
    outputs:
      buildrefs: ${{ toJSON(steps.*.outputs.buildref) }}
      latesttag: ${{ steps.upstream.outputs.tag }}
  build:
    runs-on: ubuntu-latest
    needs:
      - get-refs
    strategy:
      fail-fast: false
      matrix:
        pyver: ${{ fromJSON(inputs.pythonvers) }}
        osver: ${{ fromJSON(inputs.osvers) }}
        checkout: ${{ fromJSON(needs.get-refs.outputs.buildrefs) }}
        exclude:
          - pyver: "3.11"
            checkout: "v4.3"
          - osver: "3.17"
            checkout: "v4.3"
    permissions:
      contents: read
      packages: write

    steps:
      # https://github.com/docker/setup-buildx-action
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}

      # https://github.com/actions/checkout
      - name: Checkout repository
        uses: actions/checkout@v3

      - id: tag
        run: |
          echo "tag=${{ env.IMAGE_NAME }}:${{ matrix.checkout }}-${{ inputs.osname }}-${{ matrix.osver }}-py${{ matrix.pyver }}" >> $GITHUB_OUTPUT
      - id: tag-latest
        if: ${{ env.STABLE_OS == inputs.osname && matrix.osver == inputs.osstablever && matrix.pyver == env.STABLE_PY && matrix.checkout == needs.get-refs.outputs.latesttag }}
        run: |
          echo "tag=${{ env.IMAGE_NAME }}:latest" >> $GITHUB_OUTPUT
      - id: tag-latest-os
        if: ${{ matrix.osver == inputs.osstablever && matrix.pyver == env.STABLE_PY && matrix.checkout != 'master' }}
        run: |
          echo "tag=${{ env.IMAGE_NAME }}:latest-${{ inputs.osname }}" >> $GITHUB_OUTPUT
      - run: echo "${{ join(steps.*.outputs.tag) }}"
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ${{ inputs.osname }}/Dockerfile
          build-args: |
            SD_TAG=${{ matrix.checkout }}
            PY_VER=${{ matrix.pyver }}
            OS_VER=${{ matrix.osver }}
          push: true
          pull: true
          tags: ${{ join(steps.*.outputs.tag, ',') }}
          cache-from: type=gha,scope=${{ matrix.checkout }}-${{ inputs.osname }}-${{ matrix.osver }}-py${{ matrix.pyver }}
          cache-to: type=gha,mode=max,scope=${{ matrix.checkout }}-${{ inputs.osname }}-${{ matrix.osver }}-py${{ matrix.pyver }}
