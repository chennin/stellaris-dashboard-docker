##
name: Docker
on:
  workflow_dispatch:

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKER_USER }}/sd-test
  DF_DEBIAN: debian/Dockerfile
  DF_ALPINE: alpine/Dockerfile
  LATEST_PY: "3.10"
  LATEST_DEBIAN: bullseye
  LATEST_ALPINE: "3.17"

jobs:
  get-refs:
    runs-on: ubuntu-latest
    steps:
      - id: upstream
        uses: oprypin/find-latest-tag@v1
        with:
          repository: eliasdoehne/stellaris-dashboard
          releases-only: true
      - id: info
        run: |
          echo "buildref=${{ steps.upstream.outputs.tag }}" >> $GITHUB_OUTPUT
          echo "latest-ref=${{ steps.upstream.outputs.tag }}" >> $GITHUB_OUTPUT
          echo "latest=${{ steps.upstream.outputs.tag }}-debian-${{ env.LATEST_DEBIAN }}-py${{ env.LATEST_PY }}" >> $GITHUB_OUTPUT
          echo "latest-alpine=${{ steps.upstream.outputs.tag }}-alpine-${{ env.LATEST_ALPINE }}-py${{ env.LATEST_PY }}" >> $GITHUB_OUTPUT
      - id: master
        run: |
          echo "buildref=master" >> $GITHUB_OUTPUT
      - run: echo "Refs to build ${{ toJSON(steps.*.outputs.buildref) }}"
      - run: echo "Latest ${{ steps.info.outputs.latest }}"
    outputs:
      buildrefs: ${{ toJSON(steps.*.outputs.buildref) }}
      latest-ref: ${{ steps.info.outputs.latest-ref }}
      latest: ${{ steps.info.outputs.latest }}
      latest-alpine: ${{ steps.info.outputs.latest-alpine }}
  build:
    runs-on: ubuntu-latest
    needs:
      - get-refs
    strategy:
      matrix:
        pyver: [ "3.8", "3.10" ]
        debianver: [ bullseye ]
#        alpinever: [ "3.17" ]
        checkout: ${{ fromJSON(needs.get-refs.outputs.buildrefs) }}
    permissions:
      contents: read
      packages: write

    steps:
      # https://github.com/docker/setup-buildx-action
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}
          
      # https://github.com/actions/checkout
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Image Tag Strategy
        id: tagging
        uses: HackerHappyHour/tagging-strategy@v3
        with:
          image_name: ${{ env.IMAGE_NAME }}
          tag_name: ${{ matrix.checkout }}
#          tags: |
#            ${{ matrix.checkout }}-debian-${{ matrix.debianver }}-py${{ matrix.pyver }}
#            %X.Y%-debian-${{ matrix.debianver }}-py${{ matrix.pyver }}
          extra_tags: |
            ${{ matrix.checkout }}-debian-${{ matrix.debianver }}-py${{ matrix.pyver }}
            latest::${{ matrix.debianver == 'bullseye' && matrix.pyver == '3.10' && matrix.checkout != 'master' }}
            latest-debian::${{ matrix.debianver == 'bullseye' && matrix.pyver == '3.10' && matrix.checkout != 'master' }}

      - run: echo "${{ steps.tagging.outputs.tags }}"
      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker Debian image
        id: build-and-push-debian
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ${{ env.DF_DEBIAN }}
          build-args: |
            SD_TAG=${{ matrix.checkout }}
            PY_VER=${{ matrix.pyver }}
            DEBIAN_VER=${{ matrix.debianver }}
          push: false #${{ github.event_name != 'pull_request' }}
          pull: true
          tags: ${{ steps.tagging.outputs.tags }}
          cache-from: type=gha,scope=${{ matrix.checkout }}-debian-${{ matrix.debianver }}-py${{ matrix.pyver }}
          cache-to: type=gha,mode=max,scope=${{ matrix.checkout }}-debian-${{ matrix.debianver }}-py${{ matrix.pyver }}
